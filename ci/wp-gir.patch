diff --git a/src/auto/flags.rs b/src/auto/flags.rs
--- a/src/auto/flags.rs
+++ b/src/auto/flags.rs
@@ -272,8 +272,6 @@ bitflags! {
     pub struct MetadataFeatures: u32 {
         #[doc(alias = "WP_METADATA_FEATURE_DATA")]
         const DATA = ffi::WP_METADATA_FEATURE_DATA as _;
-
-        const PROXY_FEATURE_BOUND = ProxyFeatures::PROXY_FEATURE_BOUND.bits();
     }
 }
 
@@ -355,8 +353,6 @@ bitflags! {
     pub struct NodeFeatures: u32 {
         #[doc(alias = "WP_NODE_FEATURE_PORTS")]
         const PORTS = ffi::WP_NODE_FEATURE_PORTS as _;
-
-        const PROXY_FEATURES = ProxyFeatures::ALL.bits();
     }
 }
 
@@ -535,10 +531,6 @@ bitflags! {
         const PIPEWIRE_OBJECT_FEATURES_MINIMAL = ffi::WP_PIPEWIRE_OBJECT_FEATURES_MINIMAL as _;
         #[doc(alias = "WP_PIPEWIRE_OBJECT_FEATURES_ALL")]
         const PIPEWIRE_OBJECT_FEATURES_ALL = ffi::WP_PIPEWIRE_OBJECT_FEATURES_ALL as _;
-
-        #[doc(alias = "WP_PROXY_FEATURE_CUSTOM_START")]
-        const PROXY_FEATURE_CUSTOM_START = 1 << 16;
-        const PROXY_FEATURE_CUSTOM = 0xff00;
     }
 }
 
@@ -622,8 +614,6 @@ bitflags! {
         const ACTIVE = ffi::WP_SESSION_ITEM_FEATURE_ACTIVE as _;
         #[doc(alias = "WP_SESSION_ITEM_FEATURE_EXPORTED")]
         const EXPORTED = ffi::WP_SESSION_ITEM_FEATURE_EXPORTED as _;
-
-        const PROXY_FEATURES = ProxyFeatures::ALL.bits();
     }
 }
 
@@ -705,8 +695,6 @@ bitflags! {
     pub struct SpaDeviceFeatures: u32 {
         #[doc(alias = "WP_SPA_DEVICE_FEATURE_ENABLED")]
         const ENABLED = ffi::WP_SPA_DEVICE_FEATURE_ENABLED as _;
-
-        const PROXY_FEATURE_BOUND = ProxyFeatures::PROXY_FEATURE_BOUND.bits();
     }
 }
 
diff --git a/src/auto/metadata.rs b/src/auto/metadata.rs
--- a/src/auto/metadata.rs
+++ b/src/auto/metadata.rs
@@ -47,7 +47,7 @@ pub trait MetadataExt: IsA<Metadata> + sealed::Sealed + 'static {
     #[doc(alias = "wp_metadata_find")]
     fn find(&self, subject: u32, key: &str) -> (Option<glib::GString>, glib::GString) {
         unsafe {
-            let mut type_ = std::ptr::null();
+            let mut type_ = std::ptr::null_mut();
             let ret = from_glib_none(ffi::wp_metadata_find(self.as_ref().to_glib_none().0, subject, key.to_glib_none().0, &mut type_));
             (ret, from_glib_full(type_))
         }
diff --git a/src/auto/si_adapter.rs b/src/auto/si_adapter.rs
--- a/src/auto/si_adapter.rs
+++ b/src/auto/si_adapter.rs
@@ -38,7 +38,7 @@ pub trait SiAdapterExt: IsA<SiAdapter> + sealed::Sealed + 'static {
     #[doc(alias = "get_ports_format")]
     fn ports_format(&self) -> (SpaPod, Option<glib::GString>) {
         unsafe {
-            let mut mode = std::ptr::null();
+            let mut mode = std::ptr::null_mut();
             let ret = from_glib_full(ffi::wp_si_adapter_get_ports_format(self.as_ref().to_glib_none().0, &mut mode));
             (ret, from_glib_full(mode))
         }
diff --git a/src/auto/spa_pod_parser.rs b/src/auto/spa_pod_parser.rs
--- a/src/auto/spa_pod_parser.rs
+++ b/src/auto/spa_pod_parser.rs
@@ -135,7 +135,7 @@ impl SpaPodParser {
     #[doc(alias = "get_string")]
     pub fn string(&self) -> Option<glib::GString> {
         unsafe {
-            let mut value = std::ptr::null();
+            let mut value = std::ptr::null_mut();
             let ret = from_glib(ffi::wp_spa_pod_parser_get_string(self.to_glib_none().0, &mut value));
             if ret { Some(from_glib_full(value)) } else { None }
         }
diff --git a/src/auto/core.rs b/src/auto/core.rs
--- a/src/auto/core.rs
+++ b/src/auto/core.rs
@@ -202,7 +202,7 @@ impl Core {
         }
         let callback = load_component_trampoline::<P>;
         unsafe {
-            ffi::wp_core_load_component(self.to_glib_none().0, component.to_glib_none().0, type_.to_glib_none().0, args.to_glib_none().0, provides.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
+            ffi::wp_core_load_component(self.to_glib_none().0, component.to_glib_none().0, type_.to_glib_none().0, args.to_glib_none().0, provides.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), data.to_glib_none_mut().0);
         }
     }
 
diff --git a/src/auto/object.rs b/src/auto/object.rs
--- a/src/auto/object.rs
+++ b/src/auto/object.rs
@@ -75,8 +78,8 @@ pub trait ObjectExt: IsA<Object> + sealed::Sealed + 'static {
     }
 
     #[doc(alias = "wp_object_activate_closure")]
-    fn object_activate_closure(&self, features: ObjectFeatures, cancellable: Option<&impl IsA<gio::Cancellable>>, closure: glib::Closure) {
+    fn activate_closure(&self, features: ObjectFeatures, cancellable: Option<&impl IsA<gio::Cancellable>>, closure: glib::Closure) {
         unsafe {
             ffi::wp_object_activate_closure(self.as_ref().to_glib_none().0, features.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, closure.into_glib_ptr());
         }
     }
