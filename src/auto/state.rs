// This file was generated by gir (https://github.com/gtk-rs/gir)
// DO NOT EDIT

use crate::{Core,Properties};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "WpState")]
    pub struct State(Object<ffi::WpState, ffi::WpStateClass>);

    match fn {
        type_ => || ffi::wp_state_get_type(),
    }
}

impl State {
    #[doc(alias = "wp_state_new")]
    pub fn new(name: &str) -> State {
        unsafe {
            from_glib_full(ffi::wp_state_new(name.to_glib_none().0))
        }
    }

    #[doc(alias = "wp_state_clear")]
    pub fn clear(&self) {
        unsafe {
            ffi::wp_state_clear(self.to_glib_none().0);
        }
    }

    #[doc(alias = "wp_state_get_location")]
    #[doc(alias = "get_location")]
    pub fn location(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::wp_state_get_location(self.to_glib_none().0))
        }
    }

    #[doc(alias = "wp_state_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::wp_state_get_name(self.to_glib_none().0))
        }
    }

    #[doc(alias = "wp_state_load")]
    pub fn load(&self) -> Option<Properties> {
        unsafe {
            from_glib_full(ffi::wp_state_load(self.to_glib_none().0))
        }
    }

    #[doc(alias = "wp_state_save")]
    pub fn save(&self, props: &Properties) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wp_state_save(self.to_glib_none().0, props.to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wp_state_save_after_timeout")]
    pub fn save_after_timeout(&self, core: &Core, props: &Properties) {
        unsafe {
            ffi::wp_state_save_after_timeout(self.to_glib_none().0, core.to_glib_none().0, props.to_glib_none().0);
        }
    }

    pub fn timeout(&self) -> u32 {
        ObjectExt::property(self, "timeout")
    }

    pub fn set_timeout(&self, timeout: u32) {
        ObjectExt::set_property(self,"timeout", timeout)
    }

    #[doc(alias = "timeout")]
    pub fn connect_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_timeout_trampoline<F: Fn(&State) + 'static>(this: *mut ffi::WpState, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::timeout\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_timeout_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}
