// This file was generated by gir (https://github.com/gtk-rs/gir)
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "WpEventHook")]
    pub struct EventHook(Object<ffi::WpEventHook, ffi::WpEventHookClass>);

    match fn {
        type_ => || ffi::wp_event_hook_get_type(),
    }
}

impl EventHook {
        pub const NONE: Option<&'static EventHook> = None;
    
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::EventHook>> Sealed for T {}
}

pub trait EventHookExt: IsA<EventHook> + sealed::Sealed + 'static {
    #[doc(alias = "wp_event_hook_finish")]
    fn finish(&self, res: &impl IsA<gio::AsyncResult>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wp_event_hook_finish(self.as_ref().to_glib_none().0, res.as_ref().to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    //#[doc(alias = "wp_event_hook_get_dispatcher")]
    //#[doc(alias = "get_dispatcher")]
    //fn dispatcher(&self) -> /*Ignored*/Option<EventDispatcher> {
    //    unsafe { TODO: call ffi:wp_event_hook_get_dispatcher() }
    //}

    #[doc(alias = "wp_event_hook_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::wp_event_hook_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "wp_event_hook_get_runs_after_hooks")]
    #[doc(alias = "get_runs_after_hooks")]
    fn runs_after_hooks(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::wp_event_hook_get_runs_after_hooks(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "wp_event_hook_get_runs_before_hooks")]
    #[doc(alias = "get_runs_before_hooks")]
    fn runs_before_hooks(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::wp_event_hook_get_runs_before_hooks(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "wp_event_hook_run")]
    //fn run<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, event: /*Ignored*/&Event, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:wp_event_hook_run() }
    //}

    //#[doc(alias = "wp_event_hook_runs_for_event")]
    //fn runs_for_event(&self, event: /*Ignored*/&Event) -> bool {
    //    unsafe { TODO: call ffi:wp_event_hook_runs_for_event() }
    //}

    //#[doc(alias = "wp_event_hook_set_dispatcher")]
    //fn set_dispatcher(&self, dispatcher: /*Ignored*/&EventDispatcher) {
    //    unsafe { TODO: call ffi:wp_event_hook_set_dispatcher() }
    //}

    #[doc(alias = "dispatcher")]
    fn connect_dispatcher_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dispatcher_trampoline<P: IsA<EventHook>, F: Fn(&P) + 'static>(this: *mut ffi::WpEventHook, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(EventHook::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::dispatcher\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_dispatcher_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<EventHook>> EventHookExt for O {}
