// This file was generated by gir (https://github.com/gtk-rs/gir)
// DO NOT EDIT

use crate::{Core,Object,Properties,Proxy};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "WpSessionItem")]
    pub struct SessionItem(Object<ffi::WpSessionItem, ffi::WpSessionItemClass>) @extends Object;

    match fn {
        type_ => || ffi::wp_session_item_get_type(),
    }
}

impl SessionItem {
        pub const NONE: Option<&'static SessionItem> = None;
    

    #[doc(alias = "wp_session_item_handle_proxy_destroyed")]
    pub fn handle_proxy_destroyed(proxy: &impl IsA<Proxy>, item: &impl IsA<SessionItem>) {
        unsafe {
            ffi::wp_session_item_handle_proxy_destroyed(proxy.as_ref().to_glib_none().0, item.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "wp_session_item_make")]
    pub fn make(core: &Core, factory_name: &str) -> Option<SessionItem> {
        unsafe {
            from_glib_full(ffi::wp_session_item_make(core.to_glib_none().0, factory_name.to_glib_none().0))
        }
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::SessionItem>> Sealed for T {}
}

pub trait SessionItemExt: IsA<SessionItem> + sealed::Sealed + 'static {
    #[doc(alias = "wp_session_item_configure")]
    fn configure(&self, props: Properties) -> bool {
        unsafe {
            from_glib(ffi::wp_session_item_configure(self.as_ref().to_glib_none().0, props.into_glib_ptr()))
        }
    }

    #[doc(alias = "wp_session_item_get_associated_proxy")]
    #[doc(alias = "get_associated_proxy")]
    fn associated_proxy(&self, proxy_type: glib::types::Type) -> Option<Proxy> {
        unsafe {
            from_glib_full(ffi::wp_session_item_get_associated_proxy(self.as_ref().to_glib_none().0, proxy_type.into_glib()))
        }
    }

    #[doc(alias = "wp_session_item_get_associated_proxy_id")]
    #[doc(alias = "get_associated_proxy_id")]
    fn associated_proxy_id(&self, proxy_type: glib::types::Type) -> u32 {
        unsafe {
            ffi::wp_session_item_get_associated_proxy_id(self.as_ref().to_glib_none().0, proxy_type.into_glib())
        }
    }

    #[doc(alias = "wp_session_item_get_properties")]
    #[doc(alias = "get_properties")]
    fn properties(&self) -> Option<Properties> {
        unsafe {
            from_glib_full(ffi::wp_session_item_get_properties(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "wp_session_item_get_property")]
    #[doc(alias = "get_property")]
    fn property(&self, key: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::wp_session_item_get_property(self.as_ref().to_glib_none().0, key.to_glib_none().0))
        }
    }

    #[doc(alias = "wp_session_item_is_configured")]
    fn is_configured(&self) -> bool {
        unsafe {
            from_glib(ffi::wp_session_item_is_configured(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "wp_session_item_register")]
    fn register(self) {
        unsafe {
            ffi::wp_session_item_register(self.upcast().into_glib_ptr());
        }
    }

    #[doc(alias = "wp_session_item_remove")]
    fn remove(&self) {
        unsafe {
            ffi::wp_session_item_remove(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "wp_session_item_reset")]
    fn reset(&self) {
        unsafe {
            ffi::wp_session_item_reset(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "wp_session_item_set_properties")]
    fn set_properties(&self, props: Properties) {
        unsafe {
            ffi::wp_session_item_set_properties(self.as_ref().to_glib_none().0, props.into_glib_ptr());
        }
    }

    #[doc(alias = "properties")]
    fn connect_properties_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_properties_trampoline<P: IsA<SessionItem>, F: Fn(&P) + 'static>(this: *mut ffi::WpSessionItem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(SessionItem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::properties\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_properties_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<SessionItem>> SessionItemExt for O {}
