// This file was generated by gir (https://github.com/gtk-rs/gir)
// DO NOT EDIT

use crate::{Core,Object};
use glib::{prelude::*,translate::*};
use std::{fmt};

glib::wrapper! {
    #[doc(alias = "WpPlugin")]
    pub struct Plugin(Object<ffi::WpPlugin, ffi::WpPluginClass>) @extends Object;

    match fn {
        type_ => || ffi::wp_plugin_get_type(),
    }
}

impl Plugin {
        pub const NONE: Option<&'static Plugin> = None;
    

    #[doc(alias = "wp_plugin_find")]
    pub fn find(core: &Core, plugin_name: &str) -> Option<Plugin> {
        unsafe {
            from_glib_full(ffi::wp_plugin_find(core.to_glib_none().0, plugin_name.to_glib_none().0))
        }
    }
}

impl fmt::Display for Plugin {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str(&PluginExt::name(self))
    }
}

pub trait PluginExt: 'static {
    #[doc(alias = "wp_plugin_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> glib::GString;

    #[doc(alias = "wp_plugin_register")]
    fn register(self);
}

impl<O: IsA<Plugin>> PluginExt for O {
    fn name(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::wp_plugin_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn register(self) {
        unsafe {
            ffi::wp_plugin_register(self.upcast().into_glib_ptr());
        }
    }
}
