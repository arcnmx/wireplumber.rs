// This file was generated by gir (https://github.com/gtk-rs/gir)
// DO NOT EDIT

use crate::{EventHook,ObjectInterest};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "WpInterestEventHook")]
    pub struct InterestEventHook(Object<ffi::WpInterestEventHook, ffi::WpInterestEventHookClass>) @extends EventHook;

    match fn {
        type_ => || ffi::wp_interest_event_hook_get_type(),
    }
}

impl InterestEventHook {
        pub const NONE: Option<&'static InterestEventHook> = None;
    
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::InterestEventHook>> Sealed for T {}
}

pub trait InterestEventHookExt: IsA<InterestEventHook> + sealed::Sealed + 'static {
    //#[doc(alias = "wp_interest_event_hook_add_interest")]
    //fn add_interest(&self, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) {
    //    unsafe { TODO: call ffi:wp_interest_event_hook_add_interest() }
    //}

    #[doc(alias = "wp_interest_event_hook_add_interest_full")]
    fn add_interest_full(&self, interest: &ObjectInterest) {
        unsafe {
            ffi::wp_interest_event_hook_add_interest_full(self.as_ref().to_glib_none().0, interest.to_glib_none().0);
        }
    }
}

impl<O: IsA<InterestEventHook>> InterestEventHookExt for O {}
