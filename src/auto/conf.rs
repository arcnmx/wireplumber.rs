// This file was generated by gir (https://github.com/gtk-rs/gir)
// DO NOT EDIT

use crate::{Properties,SpaJson};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "WpConf")]
    pub struct Conf(Object<ffi::WpConf, ffi::WpConfClass>);

    match fn {
        type_ => || ffi::wp_conf_get_type(),
    }
}

impl Conf {
    #[doc(alias = "wp_conf_new")]
    pub fn new(name: &str, properties: Option<Properties>) -> Conf {
        unsafe {
            from_glib_full(ffi::wp_conf_new(name.to_glib_none().0, properties.into_glib_ptr()))
        }
    }

    #[doc(alias = "wp_conf_new_open")]
    pub fn new_open(name: &str, properties: Option<Properties>) -> Result<Option<Conf>, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::wp_conf_new_open(name.to_glib_none().0, properties.into_glib_ptr(), &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wp_conf_close")]
    pub fn close(&self) {
        unsafe {
            ffi::wp_conf_close(self.to_glib_none().0);
        }
    }

    #[doc(alias = "wp_conf_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::wp_conf_get_name(self.to_glib_none().0))
        }
    }

    #[doc(alias = "wp_conf_get_section")]
    #[doc(alias = "get_section")]
    pub fn section(&self, section: &str) -> Option<SpaJson> {
        unsafe {
            from_glib_full(ffi::wp_conf_get_section(self.to_glib_none().0, section.to_glib_none().0))
        }
    }

    #[doc(alias = "wp_conf_is_open")]
    pub fn is_open(&self) -> bool {
        unsafe {
            from_glib(ffi::wp_conf_is_open(self.to_glib_none().0))
        }
    }

    #[doc(alias = "wp_conf_open")]
    pub fn open(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::wp_conf_open(self.to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "wp_conf_section_update_props")]
    pub fn section_update_props(&self, section: &str, props: &Properties) -> i32 {
        unsafe {
            ffi::wp_conf_section_update_props(self.to_glib_none().0, section.to_glib_none().0, props.to_glib_none().0)
        }
    }

    pub fn properties(&self) -> Option<Properties> {
        ObjectExt::property(self, "properties")
    }
}
