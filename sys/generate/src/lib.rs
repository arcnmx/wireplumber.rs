// This file was generated by gir (https://github.com/gtk-rs/gir)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]

use pipewire::{pw_core, pw_context, pw_permission, pw_proxy, pw_properties, pw_impl_node};
use libspa::{spa_dict, spa_pod, spa_type_info, spa_log};
use crate::WpSpaType;

#[cfg(feature = "v0_4_8")]
use libspa::spa_json;

use glib_sys as glib;
use gobject_sys as gobject;
use gio_sys as gio;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Aliases
pub type WpObjectFeatures = c_uint;
pub type WpSpaIdTable = gconstpointer;
pub type WpSpaIdValue = gconstpointer;

// Enums
pub type WpConstraintType = c_int;
pub const WP_CONSTRAINT_TYPE_NONE: WpConstraintType = 0;
pub const WP_CONSTRAINT_TYPE_PW_GLOBAL_PROPERTY: WpConstraintType = 1;
pub const WP_CONSTRAINT_TYPE_PW_PROPERTY: WpConstraintType = 2;
pub const WP_CONSTRAINT_TYPE_G_PROPERTY: WpConstraintType = 3;

pub type WpConstraintVerb = c_int;
pub const WP_CONSTRAINT_VERB_EQUALS: WpConstraintVerb = 61;
pub const WP_CONSTRAINT_VERB_NOT_EQUALS: WpConstraintVerb = 33;
pub const WP_CONSTRAINT_VERB_IN_LIST: WpConstraintVerb = 99;
pub const WP_CONSTRAINT_VERB_IN_RANGE: WpConstraintVerb = 126;
pub const WP_CONSTRAINT_VERB_MATCHES: WpConstraintVerb = 35;
pub const WP_CONSTRAINT_VERB_IS_PRESENT: WpConstraintVerb = 43;
pub const WP_CONSTRAINT_VERB_IS_ABSENT: WpConstraintVerb = 45;

pub type WpDBusState = c_int;
pub const WP_DBUS_STATE_CLOSED: WpDBusState = 0;
pub const WP_DBUS_STATE_CONNECTING: WpDBusState = 1;
pub const WP_DBUS_STATE_CONNECTED: WpDBusState = 2;

pub type WpDirection = c_int;
pub const WP_DIRECTION_INPUT: WpDirection = 0;
pub const WP_DIRECTION_OUTPUT: WpDirection = 1;

pub type WpLibraryErrorEnum = c_int;
pub const WP_LIBRARY_ERROR_INVARIANT: WpLibraryErrorEnum = 0;
pub const WP_LIBRARY_ERROR_INVALID_ARGUMENT: WpLibraryErrorEnum = 1;
pub const WP_LIBRARY_ERROR_OPERATION_FAILED: WpLibraryErrorEnum = 2;

pub type WpLinkState = c_int;
pub const WP_LINK_STATE_ERROR: WpLinkState = -2;
pub const WP_LINK_STATE_UNLINKED: WpLinkState = -1;
pub const WP_LINK_STATE_INIT: WpLinkState = 0;
pub const WP_LINK_STATE_NEGOTIATING: WpLinkState = 1;
pub const WP_LINK_STATE_ALLOCATING: WpLinkState = 2;
pub const WP_LINK_STATE_PAUSED: WpLinkState = 3;
pub const WP_LINK_STATE_ACTIVE: WpLinkState = 4;

pub type WpNodeState = c_int;
pub const WP_NODE_STATE_ERROR: WpNodeState = -1;
pub const WP_NODE_STATE_CREATING: WpNodeState = 0;
pub const WP_NODE_STATE_SUSPENDED: WpNodeState = 1;
pub const WP_NODE_STATE_IDLE: WpNodeState = 2;
pub const WP_NODE_STATE_RUNNING: WpNodeState = 3;

pub type WpSiAdapterPortsState = c_int;
pub const WP_SI_ADAPTER_PORTS_STATE_NONE: WpSiAdapterPortsState = 0;
pub const WP_SI_ADAPTER_PORTS_STATE_CONFIGURING: WpSiAdapterPortsState = 1;
pub const WP_SI_ADAPTER_PORTS_STATE_CONFIGURED: WpSiAdapterPortsState = 2;

pub type WpTransitionStep = c_int;
pub const WP_TRANSITION_STEP_NONE: WpTransitionStep = 0;
pub const WP_TRANSITION_STEP_ERROR: WpTransitionStep = 1;
pub const WP_TRANSITION_STEP_CUSTOM_START: WpTransitionStep = 16;

// Constants
pub const WP_INTEREST_MATCH_ALL: c_int = 15;
pub const WP_ITERATOR_METHODS_VERSION: c_int = 0;
pub const WP_LOG_LEVEL_TRACE: c_int = 256;
pub const WP_OBJECT_FEATURES_ALL: WpObjectFeatures = 4294967295;
pub const WP_OBJECT_FORMAT: &[u8] = b"<%s:%p>\0";
pub const WP_PIPEWIRE_OBJECT_FEATURES_ALL: c_int = 1009;
pub const WP_PIPEWIRE_OBJECT_FEATURES_MINIMAL: c_int = 17;
pub const WP_SPA_TYPE_INVALID: WpSpaType = 4294967295;

// Flags
pub type WpDbusFeatures = c_uint;
pub const WP_DBUS_FEATURE_ENABLED: WpDbusFeatures = 1;

pub type WpInitFlags = c_uint;
pub const WP_INIT_PIPEWIRE: WpInitFlags = 1;
pub const WP_INIT_SPA_TYPES: WpInitFlags = 2;
pub const WP_INIT_SET_PW_LOG: WpInitFlags = 4;
pub const WP_INIT_SET_GLIB_LOG: WpInitFlags = 8;
pub const WP_INIT_ALL: WpInitFlags = 15;

pub type WpInterestMatch = c_uint;
pub const WP_INTEREST_MATCH_NONE: WpInterestMatch = 0;
pub const WP_INTEREST_MATCH_GTYPE: WpInterestMatch = 1;
pub const WP_INTEREST_MATCH_PW_GLOBAL_PROPERTIES: WpInterestMatch = 2;
pub const WP_INTEREST_MATCH_PW_PROPERTIES: WpInterestMatch = 4;
pub const WP_INTEREST_MATCH_G_PROPERTIES: WpInterestMatch = 8;

pub type WpInterestMatchFlags = c_uint;
pub const WP_INTEREST_MATCH_FLAGS_NONE: WpInterestMatchFlags = 0;
pub const WP_INTEREST_MATCH_FLAGS_CHECK_ALL: WpInterestMatchFlags = 1;

pub type WpLinkFeatures = c_uint;
pub const WP_LINK_FEATURE_ESTABLISHED: WpLinkFeatures = 65536;

pub type WpLookupDirs = c_uint;
pub const WP_LOOKUP_DIR_ENV_CONFIG: WpLookupDirs = 1;
pub const WP_LOOKUP_DIR_ENV_DATA: WpLookupDirs = 2;
pub const WP_LOOKUP_DIR_XDG_CONFIG_HOME: WpLookupDirs = 1024;
pub const WP_LOOKUP_DIR_ETC: WpLookupDirs = 2048;
pub const WP_LOOKUP_DIR_PREFIX_SHARE: WpLookupDirs = 4096;

pub type WpMetadataFeatures = c_uint;
pub const WP_METADATA_FEATURE_DATA: WpMetadataFeatures = 65536;

pub type WpNodeFeatures = c_uint;
pub const WP_NODE_FEATURE_PORTS: WpNodeFeatures = 65536;

pub type WpPluginFeatures = c_uint;
pub const WP_PLUGIN_FEATURE_ENABLED: WpPluginFeatures = 1;

pub type WpProxyFeatures = c_uint;
pub const WP_PROXY_FEATURE_BOUND: WpProxyFeatures = 1;
pub const WP_PIPEWIRE_OBJECT_FEATURE_INFO: WpProxyFeatures = 16;
pub const WP_PIPEWIRE_OBJECT_FEATURE_PARAM_PROPS: WpProxyFeatures = 32;
pub const WP_PIPEWIRE_OBJECT_FEATURE_PARAM_FORMAT: WpProxyFeatures = 64;
pub const WP_PIPEWIRE_OBJECT_FEATURE_PARAM_PROFILE: WpProxyFeatures = 128;
pub const WP_PIPEWIRE_OBJECT_FEATURE_PARAM_PORT_CONFIG: WpProxyFeatures = 256;
pub const WP_PIPEWIRE_OBJECT_FEATURE_PARAM_ROUTE: WpProxyFeatures = 512;

pub type WpSessionItemFeatures = c_uint;
pub const WP_SESSION_ITEM_FEATURE_ACTIVE: WpSessionItemFeatures = 1;
pub const WP_SESSION_ITEM_FEATURE_EXPORTED: WpSessionItemFeatures = 2;

pub type WpSpaDeviceFeatures = c_uint;
pub const WP_SPA_DEVICE_FEATURE_ENABLED: WpSpaDeviceFeatures = 65536;

// Callbacks
pub type WpIteratorFoldFunc = Option<unsafe extern "C" fn(*const gobject::GValue, *mut gobject::GValue, gpointer) -> gboolean>;
pub type WpIteratorForeachFunc = Option<unsafe extern "C" fn(*const gobject::GValue, gpointer)>;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpClientClass {
    pub parent_class: WpGlobalProxyClass,
}

impl ::std::fmt::Debug for WpClientClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpClientClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpComponentLoaderClass {
    pub parent_class: WpPluginClass,
    pub supports_type: Option<unsafe extern "C" fn(*mut WpComponentLoader, *const c_char) -> gboolean>,
    pub load: Option<unsafe extern "C" fn(*mut WpComponentLoader, *const c_char, *const c_char, *mut glib::GVariant, *mut *mut glib::GError) -> gboolean>,
    pub _wp_padding: [gpointer; 6],
}

impl ::std::fmt::Debug for WpComponentLoaderClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpComponentLoaderClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .field("supports_type", &self.supports_type)
         .field("load", &self.load)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpCoreClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WpCoreClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpCoreClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpDbusClass {
    pub parent_class: WpObjectClass,
}

impl ::std::fmt::Debug for WpDbusClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpDbusClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpDeviceClass {
    pub parent_class: WpGlobalProxyClass,
}

impl ::std::fmt::Debug for WpDeviceClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpDeviceClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpEndpointClass {
    pub parent_class: WpGlobalProxyClass,
    pub _wp_padding: [gpointer; 4],
}

impl ::std::fmt::Debug for WpEndpointClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpEndpointClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpFactoryClass {
    pub parent_class: WpGlobalProxyClass,
}

impl ::std::fmt::Debug for WpFactoryClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpFactoryClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpFeatureActivationTransitionClass {
    pub parent_class: WpTransitionClass,
}

impl ::std::fmt::Debug for WpFeatureActivationTransitionClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpFeatureActivationTransitionClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpGlobalProxyClass {
    pub parent_class: WpProxyClass,
    pub _wp_padding: [gpointer; 4],
}

impl ::std::fmt::Debug for WpGlobalProxyClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpGlobalProxyClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpImplEndpointClass {
    pub parent_class: WpEndpointClass,
}

impl ::std::fmt::Debug for WpImplEndpointClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpImplEndpointClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpImplMetadataClass {
    pub parent_class: WpMetadataClass,
}

impl ::std::fmt::Debug for WpImplMetadataClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpImplMetadataClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpImplModuleClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WpImplModuleClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpImplModuleClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpImplNodeClass {
    pub parent_class: WpProxyClass,
}

impl ::std::fmt::Debug for WpImplNodeClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpImplNodeClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct WpIterator {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpIterator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpIterator @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpIteratorMethods {
    pub version: u32,
    pub reset: Option<unsafe extern "C" fn(*mut WpIterator)>,
    pub next: Option<unsafe extern "C" fn(*mut WpIterator, *mut gobject::GValue) -> gboolean>,
    pub fold: Option<unsafe extern "C" fn(*mut WpIterator, WpIteratorFoldFunc, *mut gobject::GValue, gpointer) -> gboolean>,
    pub foreach: Option<unsafe extern "C" fn(*mut WpIterator, WpIteratorForeachFunc, gpointer) -> gboolean>,
    pub finalize: Option<unsafe extern "C" fn(*mut WpIterator)>,
}

impl ::std::fmt::Debug for WpIteratorMethods {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpIteratorMethods @ {self:p}"))
         .field("version", &self.version)
         .field("reset", &self.reset)
         .field("next", &self.next)
         .field("fold", &self.fold)
         .field("foreach", &self.foreach)
         .field("finalize", &self.finalize)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpLinkClass {
    pub parent_class: WpGlobalProxyClass,
}

impl ::std::fmt::Debug for WpLinkClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpLinkClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpMetadataClass {
    pub parent_class: WpGlobalProxyClass,
    pub _wp_padding: [gpointer; 4],
}

impl ::std::fmt::Debug for WpMetadataClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpMetadataClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpNodeClass {
    pub parent_class: WpGlobalProxyClass,
}

impl ::std::fmt::Debug for WpNodeClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpNodeClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpObjectClass {
    pub parent_class: gobject::GObjectClass,
    pub get_supported_features: Option<unsafe extern "C" fn(*mut WpObject) -> WpObjectFeatures>,
    pub activate_get_next_step: Option<unsafe extern "C" fn(*mut WpObject, *mut WpFeatureActivationTransition, c_uint, WpObjectFeatures) -> c_uint>,
    pub activate_execute_step: Option<unsafe extern "C" fn(*mut WpObject, *mut WpFeatureActivationTransition, c_uint, WpObjectFeatures)>,
    pub deactivate: Option<unsafe extern "C" fn(*mut WpObject, WpObjectFeatures)>,
    pub _wp_padding: [gpointer; 8],
}

impl ::std::fmt::Debug for WpObjectClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpObjectClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .field("get_supported_features", &self.get_supported_features)
         .field("activate_get_next_step", &self.activate_get_next_step)
         .field("activate_execute_step", &self.activate_execute_step)
         .field("deactivate", &self.deactivate)
         .finish()
    }
}

#[repr(C)]
pub struct WpObjectInterest {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpObjectInterest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpObjectInterest @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpObjectManagerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WpObjectManagerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpObjectManagerClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpPipewireObjectInterface {
    pub parent_iface: gobject::GTypeInterface,
    pub get_native_info: Option<unsafe extern "C" fn(*mut WpPipewireObject) -> gconstpointer>,
    pub get_properties: Option<unsafe extern "C" fn(*mut WpPipewireObject) -> *mut WpProperties>,
    pub get_param_info: Option<unsafe extern "C" fn(*mut WpPipewireObject) -> *mut glib::GVariant>,
    pub enum_params: Option<unsafe extern "C" fn(*mut WpPipewireObject, *const c_char, *mut WpSpaPod, *mut gio::GCancellable, gio::GAsyncReadyCallback, gpointer)>,
    pub enum_params_finish: Option<unsafe extern "C" fn(*mut WpPipewireObject, *mut gio::GAsyncResult, *mut *mut glib::GError) -> *mut WpIterator>,
    pub enum_params_sync: Option<unsafe extern "C" fn(*mut WpPipewireObject, *const c_char, *mut WpSpaPod) -> *mut WpIterator>,
    pub set_param: Option<unsafe extern "C" fn(*mut WpPipewireObject, *const c_char, u32, *mut WpSpaPod) -> gboolean>,
    pub _wp_padding: [gpointer; 5],
}

impl ::std::fmt::Debug for WpPipewireObjectInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpPipewireObjectInterface @ {self:p}"))
         .field("parent_iface", &self.parent_iface)
         .field("get_native_info", &self.get_native_info)
         .field("get_properties", &self.get_properties)
         .field("get_param_info", &self.get_param_info)
         .field("enum_params", &self.enum_params)
         .field("enum_params_finish", &self.enum_params_finish)
         .field("enum_params_sync", &self.enum_params_sync)
         .field("set_param", &self.set_param)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpPluginClass {
    pub parent_class: WpObjectClass,
    pub enable: Option<unsafe extern "C" fn(*mut WpPlugin, *mut WpTransition)>,
    pub disable: Option<unsafe extern "C" fn(*mut WpPlugin)>,
    pub _wp_padding: [gpointer; 6],
}

impl ::std::fmt::Debug for WpPluginClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpPluginClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .field("enable", &self.enable)
         .field("disable", &self.disable)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpPortClass {
    pub parent_class: WpGlobalProxyClass,
}

impl ::std::fmt::Debug for WpPortClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpPortClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct WpProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpProperties @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpPropertiesItem {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpPropertiesItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpPropertiesItem @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpProxyClass {
    pub parent_class: WpObjectClass,
    pub pw_iface_type: *const c_char,
    pub pw_iface_version: u32,
    pub pw_proxy_created: Option<unsafe extern "C" fn(*mut WpProxy, *mut pw_proxy)>,
    pub pw_proxy_destroyed: Option<unsafe extern "C" fn(*mut WpProxy)>,
    pub bound: Option<unsafe extern "C" fn(*mut WpProxy, u32)>,
    pub error: Option<unsafe extern "C" fn(*mut WpProxy, c_int, c_int, *const c_char)>,
    pub _wp_padding: [gpointer; 6],
}

impl ::std::fmt::Debug for WpProxyClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpProxyClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .field("pw_iface_type", &self.pw_iface_type)
         .field("pw_iface_version", &self.pw_iface_version)
         .field("pw_proxy_created", &self.pw_proxy_created)
         .field("pw_proxy_destroyed", &self.pw_proxy_destroyed)
         .field("bound", &self.bound)
         .field("error", &self.error)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpSessionItemClass {
    pub parent_class: WpObjectClass,
    pub reset: Option<unsafe extern "C" fn(*mut WpSessionItem)>,
    pub configure: Option<unsafe extern "C" fn(*mut WpSessionItem, *mut WpProperties) -> gboolean>,
    pub get_associated_proxy: Option<unsafe extern "C" fn(*mut WpSessionItem, GType) -> gpointer>,
    pub disable_active: Option<unsafe extern "C" fn(*mut WpSessionItem)>,
    pub disable_exported: Option<unsafe extern "C" fn(*mut WpSessionItem)>,
    pub enable_active: Option<unsafe extern "C" fn(*mut WpSessionItem, *mut WpTransition)>,
    pub enable_exported: Option<unsafe extern "C" fn(*mut WpSessionItem, *mut WpTransition)>,
    pub _wp_padding: [gpointer; 5],
}

impl ::std::fmt::Debug for WpSessionItemClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSessionItemClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .field("reset", &self.reset)
         .field("configure", &self.configure)
         .field("get_associated_proxy", &self.get_associated_proxy)
         .field("disable_active", &self.disable_active)
         .field("disable_exported", &self.disable_exported)
         .field("enable_active", &self.enable_active)
         .field("enable_exported", &self.enable_exported)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpSiAcquisitionInterface {
    pub interface: gobject::GTypeInterface,
    pub acquire: Option<unsafe extern "C" fn(*mut WpSiAcquisition, *mut WpSiLink, *mut WpSiLinkable, gio::GAsyncReadyCallback, gpointer)>,
    pub acquire_finish: Option<unsafe extern "C" fn(*mut WpSiAcquisition, *mut gio::GAsyncResult, *mut *mut glib::GError) -> gboolean>,
    pub release: Option<unsafe extern "C" fn(*mut WpSiAcquisition, *mut WpSiLink, *mut WpSiLinkable)>,
    pub _wp_padding: [gpointer; 5],
}

impl ::std::fmt::Debug for WpSiAcquisitionInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSiAcquisitionInterface @ {self:p}"))
         .field("interface", &self.interface)
         .field("acquire", &self.acquire)
         .field("acquire_finish", &self.acquire_finish)
         .field("release", &self.release)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpSiAdapterInterface {
    pub interface: gobject::GTypeInterface,
    pub get_ports_format: Option<unsafe extern "C" fn(*mut WpSiAdapter, *mut *const c_char) -> *mut WpSpaPod>,
    pub set_ports_format: Option<unsafe extern "C" fn(*mut WpSiAdapter, *mut WpSpaPod, *const c_char, gio::GAsyncReadyCallback, gpointer)>,
    pub set_ports_format_finish: Option<unsafe extern "C" fn(*mut WpSiAdapter, *mut gio::GAsyncResult, *mut *mut glib::GError) -> gboolean>,
    pub get_ports_state: Option<unsafe extern "C" fn(*mut WpSiAdapter) -> WpSiAdapterPortsState>,
    pub _wp_padding: [gpointer; 4],
}

impl ::std::fmt::Debug for WpSiAdapterInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSiAdapterInterface @ {self:p}"))
         .field("interface", &self.interface)
         .field("get_ports_format", &self.get_ports_format)
         .field("set_ports_format", &self.set_ports_format)
         .field("set_ports_format_finish", &self.set_ports_format_finish)
         .field("get_ports_state", &self.get_ports_state)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpSiEndpointInterface {
    pub interface: gobject::GTypeInterface,
    pub get_registration_info: Option<unsafe extern "C" fn(*mut WpSiEndpoint) -> *mut glib::GVariant>,
    pub get_properties: Option<unsafe extern "C" fn(*mut WpSiEndpoint) -> *mut WpProperties>,
    pub _wp_padding: [gpointer; 6],
}

impl ::std::fmt::Debug for WpSiEndpointInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSiEndpointInterface @ {self:p}"))
         .field("interface", &self.interface)
         .field("get_registration_info", &self.get_registration_info)
         .field("get_properties", &self.get_properties)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpSiFactoryClass {
    pub parent_class: gobject::GObjectClass,
    pub construct: Option<unsafe extern "C" fn(*mut WpSiFactory, *mut WpCore) -> *mut WpSessionItem>,
    pub _wp_padding: [gpointer; 7],
}

impl ::std::fmt::Debug for WpSiFactoryClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSiFactoryClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .field("construct", &self.construct)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpSiLinkInterface {
    pub interface: gobject::GTypeInterface,
    pub get_registration_info: Option<unsafe extern "C" fn(*mut WpSiLink) -> *mut glib::GVariant>,
    pub get_properties: Option<unsafe extern "C" fn(*mut WpSiLink) -> *mut WpProperties>,
    pub get_out_item: Option<unsafe extern "C" fn(*mut WpSiLink) -> *mut WpSiLinkable>,
    pub get_in_item: Option<unsafe extern "C" fn(*mut WpSiLink) -> *mut WpSiLinkable>,
    pub _wp_padding: [gpointer; 4],
}

impl ::std::fmt::Debug for WpSiLinkInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSiLinkInterface @ {self:p}"))
         .field("interface", &self.interface)
         .field("get_registration_info", &self.get_registration_info)
         .field("get_properties", &self.get_properties)
         .field("get_out_item", &self.get_out_item)
         .field("get_in_item", &self.get_in_item)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpSiLinkableInterface {
    pub interface: gobject::GTypeInterface,
    pub get_ports: Option<unsafe extern "C" fn(*mut WpSiLinkable, *const c_char) -> *mut glib::GVariant>,
    pub get_acquisition: Option<unsafe extern "C" fn(*mut WpSiLinkable) -> *mut WpSiAcquisition>,
    pub _wp_padding: [gpointer; 6],
}

impl ::std::fmt::Debug for WpSiLinkableInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSiLinkableInterface @ {self:p}"))
         .field("interface", &self.interface)
         .field("get_ports", &self.get_ports)
         .field("get_acquisition", &self.get_acquisition)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpSpaDeviceClass {
    pub parent_class: WpProxyClass,
}

impl ::std::fmt::Debug for WpSpaDeviceClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSpaDeviceClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct WpSpaJson {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpSpaJson {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSpaJson @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpSpaJsonBuilder {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpSpaJsonBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSpaJsonBuilder @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpSpaJsonParser {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpSpaJsonParser {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSpaJsonParser @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpSpaPod {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpSpaPod {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSpaPod @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpSpaPodBuilder {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpSpaPodBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSpaPodBuilder @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpSpaPodParser {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpSpaPodParser {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSpaPodParser @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpStateClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for WpStateClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpStateClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpTransitionClass {
    pub parent_class: gobject::GObjectClass,
    pub get_next_step: Option<unsafe extern "C" fn(*mut WpTransition, c_uint) -> c_uint>,
    pub execute_step: Option<unsafe extern "C" fn(*mut WpTransition, c_uint)>,
    pub _wp_padding: [gpointer; 6],
}

impl ::std::fmt::Debug for WpTransitionClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpTransitionClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .field("get_next_step", &self.get_next_step)
         .field("execute_step", &self.execute_step)
         .finish()
    }
}

// Classes
#[repr(C)]
pub struct WpClient {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpClient @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpComponentLoader {
    pub parent_instance: WpPlugin,
}

impl ::std::fmt::Debug for WpComponentLoader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpComponentLoader @ {self:p}"))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct WpCore {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpCore {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpCore @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpDbus {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpDbus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpDbus @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpDevice {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpDevice @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpEndpoint {
    pub parent_instance: WpGlobalProxy,
}

impl ::std::fmt::Debug for WpEndpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpEndpoint @ {self:p}"))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct WpFactory {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpFactory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpFactory @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpFeatureActivationTransition {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpFeatureActivationTransition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpFeatureActivationTransition @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpGlobalProxy {
    pub parent_instance: WpProxy,
}

impl ::std::fmt::Debug for WpGlobalProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpGlobalProxy @ {self:p}"))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct WpImplEndpoint {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpImplEndpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpImplEndpoint @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpImplMetadata {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpImplMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpImplMetadata @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpImplModule {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpImplModule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpImplModule @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpImplNode {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpImplNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpImplNode @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpLink {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpLink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpLink @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpMetadata {
    pub parent_instance: WpGlobalProxy,
}

impl ::std::fmt::Debug for WpMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpMetadata @ {self:p}"))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct WpNode {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpNode @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpObject {
    pub parent_instance: gobject::GObject,
}

impl ::std::fmt::Debug for WpObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpObject @ {self:p}"))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct WpObjectManager {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpObjectManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpObjectManager @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpPlugin {
    pub parent_instance: WpObject,
}

impl ::std::fmt::Debug for WpPlugin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpPlugin @ {self:p}"))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct WpPort {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpPort {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpPort @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpProxy {
    pub parent_instance: WpObject,
}

impl ::std::fmt::Debug for WpProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpProxy @ {self:p}"))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpSessionItem {
    pub parent_instance: WpObject,
}

impl ::std::fmt::Debug for WpSessionItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSessionItem @ {self:p}"))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpSiFactory {
    pub parent_instance: gobject::GObject,
}

impl ::std::fmt::Debug for WpSiFactory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSiFactory @ {self:p}"))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct WpSpaDevice {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpSpaDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpSpaDevice @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct WpState {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpState @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct WpTransition {
    pub parent_instance: gobject::GObject,
}

impl ::std::fmt::Debug for WpTransition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("WpTransition @ {self:p}"))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

// Interfaces
#[repr(C)]
pub struct WpPipewireObject {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpPipewireObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "WpPipewireObject @ {self:p}")
    }
}

#[repr(C)]
pub struct WpSiAcquisition {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpSiAcquisition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "WpSiAcquisition @ {self:p}")
    }
}

#[repr(C)]
pub struct WpSiAdapter {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpSiAdapter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "WpSiAdapter @ {self:p}")
    }
}

#[repr(C)]
pub struct WpSiEndpoint {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpSiEndpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "WpSiEndpoint @ {self:p}")
    }
}

#[repr(C)]
pub struct WpSiLink {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpSiLink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "WpSiLink @ {self:p}")
    }
}

#[repr(C)]
pub struct WpSiLinkable {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for WpSiLinkable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "WpSiLinkable @ {self:p}")
    }
}


#[link(name = "wireplumber-0.4")]
extern "C" {

    //=========================================================================
    // WpConstraintType
    //=========================================================================
    pub fn wp_constraint_type_get_type() -> GType;

    //=========================================================================
    // WpConstraintVerb
    //=========================================================================
    pub fn wp_constraint_verb_get_type() -> GType;

    //=========================================================================
    // WpDBusState
    //=========================================================================
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_dbus_state_get_type() -> GType;

    //=========================================================================
    // WpDirection
    //=========================================================================
    pub fn wp_direction_get_type() -> GType;

    //=========================================================================
    // WpLibraryErrorEnum
    //=========================================================================
    pub fn wp_library_error_enum_get_type() -> GType;

    //=========================================================================
    // WpLinkState
    //=========================================================================
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_link_state_get_type() -> GType;

    //=========================================================================
    // WpNodeState
    //=========================================================================
    pub fn wp_node_state_get_type() -> GType;

    //=========================================================================
    // WpSiAdapterPortsState
    //=========================================================================
    #[cfg(feature = "v0_4_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_10")))]
    pub fn wp_si_adapter_ports_state_get_type() -> GType;

    //=========================================================================
    // WpTransitionStep
    //=========================================================================
    pub fn wp_transition_step_get_type() -> GType;

    //=========================================================================
    // WpDbusFeatures
    //=========================================================================
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_dbus_features_get_type() -> GType;

    //=========================================================================
    // WpInitFlags
    //=========================================================================
    pub fn wp_init_flags_get_type() -> GType;

    //=========================================================================
    // WpInterestMatch
    //=========================================================================
    pub fn wp_interest_match_get_type() -> GType;

    //=========================================================================
    // WpInterestMatchFlags
    //=========================================================================
    pub fn wp_interest_match_flags_get_type() -> GType;

    //=========================================================================
    // WpLinkFeatures
    //=========================================================================
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_link_features_get_type() -> GType;

    //=========================================================================
    // WpLookupDirs
    //=========================================================================
    pub fn wp_lookup_dirs_get_type() -> GType;

    //=========================================================================
    // WpMetadataFeatures
    //=========================================================================
    pub fn wp_metadata_features_get_type() -> GType;

    //=========================================================================
    // WpNodeFeatures
    //=========================================================================
    pub fn wp_node_features_get_type() -> GType;

    //=========================================================================
    // WpPluginFeatures
    //=========================================================================
    pub fn wp_plugin_features_get_type() -> GType;

    //=========================================================================
    // WpProxyFeatures
    //=========================================================================
    pub fn wp_proxy_features_get_type() -> GType;

    //=========================================================================
    // WpSessionItemFeatures
    //=========================================================================
    pub fn wp_session_item_features_get_type() -> GType;

    //=========================================================================
    // WpSpaDeviceFeatures
    //=========================================================================
    pub fn wp_spa_device_features_get_type() -> GType;

    //=========================================================================
    // WpIterator
    //=========================================================================
    pub fn wp_iterator_get_type() -> GType;
    pub fn wp_iterator_new(methods: *const WpIteratorMethods, user_size: size_t) -> *mut WpIterator;
    pub fn wp_iterator_new_ptr_array(items: *mut glib::GPtrArray, item_type: GType) -> *mut WpIterator;
    pub fn wp_iterator_fold(self_: *mut WpIterator, func: WpIteratorFoldFunc, ret: *mut gobject::GValue, data: gpointer) -> gboolean;
    pub fn wp_iterator_foreach(self_: *mut WpIterator, func: WpIteratorForeachFunc, data: gpointer) -> gboolean;
    pub fn wp_iterator_get_user_data(self_: *mut WpIterator) -> gpointer;
    pub fn wp_iterator_next(self_: *mut WpIterator, item: *mut gobject::GValue) -> gboolean;
    pub fn wp_iterator_ref(self_: *mut WpIterator) -> *mut WpIterator;
    pub fn wp_iterator_reset(self_: *mut WpIterator);
    pub fn wp_iterator_unref(self_: *mut WpIterator);

    //=========================================================================
    // WpIteratorMethods
    //=========================================================================

    //=========================================================================
    // WpObjectInterest
    //=========================================================================
    pub fn wp_object_interest_get_type() -> GType;
    pub fn wp_object_interest_new(gtype: GType, ...) -> *mut WpObjectInterest;
    pub fn wp_object_interest_new_type(gtype: GType) -> *mut WpObjectInterest;
    //pub fn wp_object_interest_new_valist(gtype: GType, args: /*Unimplemented*/*mut va_list) -> *mut WpObjectInterest;
    pub fn wp_object_interest_add_constraint(self_: *mut WpObjectInterest, type_: WpConstraintType, subject: *const c_char, verb: WpConstraintVerb, value: *mut glib::GVariant);
    pub fn wp_object_interest_matches(self_: *mut WpObjectInterest, object: gpointer) -> gboolean;
    pub fn wp_object_interest_matches_full(self_: *mut WpObjectInterest, flags: WpInterestMatchFlags, object_type: GType, object: *mut gobject::GObject, pw_props: *mut WpProperties, pw_global_props: *mut WpProperties) -> WpInterestMatch;
    pub fn wp_object_interest_ref(self_: *mut WpObjectInterest) -> *mut WpObjectInterest;
    pub fn wp_object_interest_unref(self_: *mut WpObjectInterest);
    pub fn wp_object_interest_validate(self_: *mut WpObjectInterest, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // WpProperties
    //=========================================================================
    pub fn wp_properties_get_type() -> GType;
    pub fn wp_properties_new(key: *const c_char, ...) -> *mut WpProperties;
    pub fn wp_properties_new_copy(props: *const pw_properties) -> *mut WpProperties;
    pub fn wp_properties_new_copy_dict(dict: *const spa_dict) -> *mut WpProperties;
    pub fn wp_properties_new_empty() -> *mut WpProperties;
    pub fn wp_properties_new_string(str: *const c_char) -> *mut WpProperties;
    pub fn wp_properties_new_take(props: *mut pw_properties) -> *mut WpProperties;
    //pub fn wp_properties_new_valist(key: *const c_char, args: /*Unimplemented*/va_list) -> *mut WpProperties;
    pub fn wp_properties_new_wrap(props: *const pw_properties) -> *mut WpProperties;
    pub fn wp_properties_new_wrap_dict(dict: *const spa_dict) -> *mut WpProperties;
    pub fn wp_properties_add(self_: *mut WpProperties, props: *mut WpProperties) -> c_int;
    pub fn wp_properties_add_from_dict(self_: *mut WpProperties, dict: *const spa_dict) -> c_int;
    pub fn wp_properties_add_keys(self_: *mut WpProperties, props: *mut WpProperties, key1: *const c_char, ...) -> c_int;
    pub fn wp_properties_add_keys_array(self_: *mut WpProperties, props: *mut WpProperties, keys: *mut *const c_char) -> c_int;
    pub fn wp_properties_add_keys_from_dict(self_: *mut WpProperties, dict: *const spa_dict, key1: *const c_char, ...) -> c_int;
    pub fn wp_properties_copy(other: *mut WpProperties) -> *mut WpProperties;
    pub fn wp_properties_ensure_unique_owner(self_: *mut WpProperties) -> *mut WpProperties;
    pub fn wp_properties_get(self_: *mut WpProperties, key: *const c_char) -> *const c_char;
    #[cfg(feature = "v0_4_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_10")))]
    pub fn wp_properties_get_count(self_: *mut WpProperties) -> c_uint;
    pub fn wp_properties_matches(self_: *mut WpProperties, other: *mut WpProperties) -> gboolean;
    pub fn wp_properties_new_iterator(self_: *mut WpProperties) -> *mut WpIterator;
    pub fn wp_properties_peek_dict(self_: *mut WpProperties) -> *const spa_dict;
    pub fn wp_properties_ref(self_: *mut WpProperties) -> *mut WpProperties;
    pub fn wp_properties_set(self_: *mut WpProperties, key: *const c_char, value: *const c_char) -> c_int;
    pub fn wp_properties_setf(self_: *mut WpProperties, key: *const c_char, format: *const c_char, ...) -> c_int;
    //pub fn wp_properties_setf_valist(self_: *mut WpProperties, key: *const c_char, format: *const c_char, args: /*Unimplemented*/va_list) -> c_int;
    pub fn wp_properties_sort(self_: *mut WpProperties);
    pub fn wp_properties_to_pw_properties(self_: *mut WpProperties) -> *mut pw_properties;
    pub fn wp_properties_unref(self_: *mut WpProperties);
    pub fn wp_properties_unref_and_take_pw_properties(self_: *mut WpProperties) -> *mut pw_properties;
    pub fn wp_properties_update(self_: *mut WpProperties, props: *mut WpProperties) -> c_int;
    pub fn wp_properties_update_from_dict(self_: *mut WpProperties, dict: *const spa_dict) -> c_int;
    pub fn wp_properties_update_keys(self_: *mut WpProperties, props: *mut WpProperties, key1: *const c_char, ...) -> c_int;
    pub fn wp_properties_update_keys_array(self_: *mut WpProperties, props: *mut WpProperties, keys: *mut *const c_char) -> c_int;
    pub fn wp_properties_update_keys_from_dict(self_: *mut WpProperties, dict: *const spa_dict, key1: *const c_char, ...) -> c_int;
    pub fn wp_properties_iterator_item_get_key(item: *const gobject::GValue) -> *const c_char;
    pub fn wp_properties_iterator_item_get_value(item: *const gobject::GValue) -> *const c_char;

    //=========================================================================
    // WpPropertiesItem
    //=========================================================================
    pub fn wp_properties_item_get_type() -> GType;
    #[cfg(feature = "v0_4_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_2")))]
    pub fn wp_properties_item_get_key(self_: *mut WpPropertiesItem) -> *const c_char;
    #[cfg(feature = "v0_4_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_2")))]
    pub fn wp_properties_item_get_value(self_: *mut WpPropertiesItem) -> *const c_char;
    #[cfg(feature = "v0_4_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_2")))]
    pub fn wp_properties_item_ref(self_: *mut WpPropertiesItem) -> *mut WpPropertiesItem;
    #[cfg(feature = "v0_4_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_2")))]
    pub fn wp_properties_item_unref(self_: *mut WpPropertiesItem);

    //=========================================================================
    // WpSpaJson
    //=========================================================================
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_get_type() -> GType;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_new_array(format: *const c_char, ...) -> *mut WpSpaJson;
    //#[cfg(feature = "v0_4_8")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    //pub fn wp_spa_json_new_array_valist(format: *const c_char, args: /*Unimplemented*/va_list) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_new_boolean(value: gboolean) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_new_float(value: c_float) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_new_from_string(json_str: *const c_char) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_10")))]
    pub fn wp_spa_json_new_from_stringn(json_str: *const c_char, len: size_t) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_new_int(value: c_int) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_new_null() -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_new_object(key: *const c_char, format: *const c_char, ...) -> *mut WpSpaJson;
    //#[cfg(feature = "v0_4_8")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    //pub fn wp_spa_json_new_object_valist(key: *const c_char, format: *const c_char, args: /*Unimplemented*/va_list) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_new_string(value: *const c_char) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_new_wrap(json: *mut spa_json) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_copy(other: *mut WpSpaJson) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_ensure_unique_owner(self_: *mut WpSpaJson) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_get_data(self_: *const WpSpaJson) -> *const c_char;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_get_size(self_: *const WpSpaJson) -> size_t;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_get_spa_json(self_: *const WpSpaJson) -> *const spa_json;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_is_array(self_: *mut WpSpaJson) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_is_boolean(self_: *mut WpSpaJson) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_is_float(self_: *mut WpSpaJson) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_is_int(self_: *mut WpSpaJson) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_is_null(self_: *mut WpSpaJson) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_is_object(self_: *mut WpSpaJson) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_is_string(self_: *mut WpSpaJson) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_is_unique_owner(self_: *mut WpSpaJson) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_new_iterator(self_: *mut WpSpaJson) -> *mut WpIterator;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_object_get(self_: *mut WpSpaJson, ...) -> gboolean;
    //#[cfg(feature = "v0_4_8")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    //pub fn wp_spa_json_object_get_valist(self_: *mut WpSpaJson, args: /*Unimplemented*/va_list) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parse_array(self_: *mut WpSpaJson, ...) -> gboolean;
    //#[cfg(feature = "v0_4_8")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    //pub fn wp_spa_json_parse_array_valist(self_: *mut WpSpaJson, args: /*Unimplemented*/va_list) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parse_boolean(self_: *mut WpSpaJson, value: *mut gboolean) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parse_float(self_: *mut WpSpaJson, value: *mut c_float) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parse_int(self_: *mut WpSpaJson, value: *mut c_int) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parse_object(self_: *mut WpSpaJson, ...) -> gboolean;
    //#[cfg(feature = "v0_4_8")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    //pub fn wp_spa_json_parse_object_valist(self_: *mut WpSpaJson, args: /*Unimplemented*/va_list) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parse_string(self_: *mut WpSpaJson) -> *mut c_char;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_ref(self_: *mut WpSpaJson) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_spa_json_to_string(self_: *const WpSpaJson) -> *mut c_char;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_unref(self_: *mut WpSpaJson);

    //=========================================================================
    // WpSpaJsonBuilder
    //=========================================================================
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_get_type() -> GType;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_new_array() -> *mut WpSpaJsonBuilder;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_new_object() -> *mut WpSpaJsonBuilder;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_add(self_: *mut WpSpaJsonBuilder, ...);
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_add_boolean(self_: *mut WpSpaJsonBuilder, value: gboolean);
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_add_float(self_: *mut WpSpaJsonBuilder, value: c_float);
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_add_int(self_: *mut WpSpaJsonBuilder, value: c_int);
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_add_json(self_: *mut WpSpaJsonBuilder, json: *mut WpSpaJson);
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_add_null(self_: *mut WpSpaJsonBuilder);
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_add_property(self_: *mut WpSpaJsonBuilder, key: *const c_char);
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_add_string(self_: *mut WpSpaJsonBuilder, value: *const c_char);
    //#[cfg(feature = "v0_4_8")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    //pub fn wp_spa_json_builder_add_valist(self_: *mut WpSpaJsonBuilder, args: /*Unimplemented*/va_list);
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_end(self_: *mut WpSpaJsonBuilder) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_ref(self_: *mut WpSpaJsonBuilder) -> *mut WpSpaJsonBuilder;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_builder_unref(self_: *mut WpSpaJsonBuilder);

    //=========================================================================
    // WpSpaJsonParser
    //=========================================================================
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_get_type() -> GType;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_new_array(json: *mut WpSpaJson) -> *mut WpSpaJsonParser;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_new_object(json: *mut WpSpaJson) -> *mut WpSpaJsonParser;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_end(self_: *mut WpSpaJsonParser);
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_get(self_: *mut WpSpaJsonParser, ...) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_get_boolean(self_: *mut WpSpaJsonParser, value: *mut gboolean) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_get_float(self_: *mut WpSpaJsonParser, value: *mut c_float) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_get_int(self_: *mut WpSpaJsonParser, value: *mut c_int) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_get_json(self_: *mut WpSpaJsonParser) -> *mut WpSpaJson;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_get_null(self_: *mut WpSpaJsonParser) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_get_string(self_: *mut WpSpaJsonParser) -> *mut c_char;
    //#[cfg(feature = "v0_4_8")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    //pub fn wp_spa_json_parser_get_valist(self_: *mut WpSpaJsonParser, args: /*Unimplemented*/va_list) -> gboolean;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_ref(self_: *mut WpSpaJsonParser) -> *mut WpSpaJsonParser;
    #[cfg(feature = "v0_4_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_8")))]
    pub fn wp_spa_json_parser_unref(self_: *mut WpSpaJsonParser);

    //=========================================================================
    // WpSpaPod
    //=========================================================================
    pub fn wp_spa_pod_get_type() -> GType;
    pub fn wp_spa_pod_new_boolean(value: gboolean) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_bytes(value: gconstpointer, len: u32) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_choice(choice_type: *const c_char, ...) -> *mut WpSpaPod;
    //pub fn wp_spa_pod_new_choice_valist(choice_type: *const c_char, args: /*Unimplemented*/va_list) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_double(value: c_double) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_fd(value: i64) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_float(value: c_float) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_fraction(num: u32, denom: u32) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_id(value: u32) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_int(value: i32) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_long(value: i64) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_none() -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_object(type_name: *const c_char, id_name: *const c_char, ...) -> *mut WpSpaPod;
    //pub fn wp_spa_pod_new_object_valist(type_name: *const c_char, id_name: *const c_char, args: /*Unimplemented*/va_list) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_pointer(type_name: *const c_char, value: gconstpointer) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_rectangle(width: u32, height: u32) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_sequence(unit: c_uint, ...) -> *mut WpSpaPod;
    //pub fn wp_spa_pod_new_sequence_valist(unit: c_uint, args: /*Unimplemented*/va_list) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_string(value: *const c_char) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_wrap(pod: *mut spa_pod) -> *mut WpSpaPod;
    pub fn wp_spa_pod_new_wrap_const(pod: *const spa_pod) -> *mut WpSpaPod;
    pub fn wp_spa_pod_copy(other: *mut WpSpaPod) -> *mut WpSpaPod;
    pub fn wp_spa_pod_ensure_unique_owner(self_: *mut WpSpaPod) -> *mut WpSpaPod;
    pub fn wp_spa_pod_equal(self_: *mut WpSpaPod, pod: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_filter(self_: *mut WpSpaPod, filter: *mut WpSpaPod) -> *mut WpSpaPod;
    pub fn wp_spa_pod_fixate(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_get_array_child(self_: *mut WpSpaPod) -> *mut WpSpaPod;
    pub fn wp_spa_pod_get_boolean(self_: *mut WpSpaPod, value: *mut gboolean) -> gboolean;
    pub fn wp_spa_pod_get_bytes(self_: *mut WpSpaPod, value: *mut gconstpointer, len: *mut u32) -> gboolean;
    pub fn wp_spa_pod_get_choice_child(self_: *mut WpSpaPod) -> *mut WpSpaPod;
    pub fn wp_spa_pod_get_choice_type(self_: *mut WpSpaPod) -> WpSpaIdValue;
    pub fn wp_spa_pod_get_control(self_: *mut WpSpaPod, offset: *mut u32, ctl_type: *mut *const c_char, value: *mut *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_get_double(self_: *mut WpSpaPod, value: *mut c_double) -> gboolean;
    pub fn wp_spa_pod_get_fd(self_: *mut WpSpaPod, value: *mut i64) -> gboolean;
    pub fn wp_spa_pod_get_float(self_: *mut WpSpaPod, value: *mut c_float) -> gboolean;
    pub fn wp_spa_pod_get_fraction(self_: *mut WpSpaPod, num: *mut u32, denom: *mut u32) -> gboolean;
    pub fn wp_spa_pod_get_id(self_: *mut WpSpaPod, value: *mut u32) -> gboolean;
    pub fn wp_spa_pod_get_int(self_: *mut WpSpaPod, value: *mut i32) -> gboolean;
    pub fn wp_spa_pod_get_long(self_: *mut WpSpaPod, value: *mut i64) -> gboolean;
    pub fn wp_spa_pod_get_object(self_: *mut WpSpaPod, id_name: *mut *const c_char, ...) -> gboolean;
    //pub fn wp_spa_pod_get_object_valist(self_: *mut WpSpaPod, id_name: *mut *const c_char, args: /*Unimplemented*/va_list) -> gboolean;
    pub fn wp_spa_pod_get_pointer(self_: *mut WpSpaPod, value: *mut gconstpointer) -> gboolean;
    pub fn wp_spa_pod_get_property(self_: *mut WpSpaPod, key: *mut *const c_char, value: *mut *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_get_rectangle(self_: *mut WpSpaPod, width: *mut u32, height: *mut u32) -> gboolean;
    pub fn wp_spa_pod_get_spa_pod(self_: *const WpSpaPod) -> *const spa_pod;
    pub fn wp_spa_pod_get_spa_type(self_: *mut WpSpaPod) -> WpSpaType;
    pub fn wp_spa_pod_get_string(self_: *mut WpSpaPod, value: *mut *const c_char) -> gboolean;
    pub fn wp_spa_pod_get_struct(self_: *mut WpSpaPod, ...) -> gboolean;
    //pub fn wp_spa_pod_get_struct_valist(self_: *mut WpSpaPod, args: /*Unimplemented*/va_list) -> gboolean;
    pub fn wp_spa_pod_is_array(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_boolean(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_bytes(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_choice(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_control(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_double(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_fd(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_float(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_fraction(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_id(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_int(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_long(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_none(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_object(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_pointer(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_property(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_rectangle(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_sequence(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_string(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_struct(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_is_unique_owner(self_: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_new_iterator(pod: *mut WpSpaPod) -> *mut WpIterator;
    pub fn wp_spa_pod_ref(self_: *mut WpSpaPod) -> *mut WpSpaPod;
    pub fn wp_spa_pod_set_boolean(self_: *mut WpSpaPod, value: gboolean) -> gboolean;
    pub fn wp_spa_pod_set_double(self_: *mut WpSpaPod, value: c_double) -> gboolean;
    pub fn wp_spa_pod_set_fd(self_: *mut WpSpaPod, value: i64) -> gboolean;
    pub fn wp_spa_pod_set_float(self_: *mut WpSpaPod, value: c_float) -> gboolean;
    pub fn wp_spa_pod_set_fraction(self_: *mut WpSpaPod, num: u32, denom: u32) -> gboolean;
    pub fn wp_spa_pod_set_id(self_: *mut WpSpaPod, value: u32) -> gboolean;
    pub fn wp_spa_pod_set_int(self_: *mut WpSpaPod, value: i32) -> gboolean;
    pub fn wp_spa_pod_set_long(self_: *mut WpSpaPod, value: i64) -> gboolean;
    pub fn wp_spa_pod_set_pod(self_: *mut WpSpaPod, pod: *mut WpSpaPod) -> gboolean;
    pub fn wp_spa_pod_set_pointer(self_: *mut WpSpaPod, type_name: *const c_char, value: gconstpointer) -> gboolean;
    pub fn wp_spa_pod_set_rectangle(self_: *mut WpSpaPod, width: u32, height: u32) -> gboolean;
    pub fn wp_spa_pod_unref(self_: *mut WpSpaPod);

    //=========================================================================
    // WpSpaPodBuilder
    //=========================================================================
    pub fn wp_spa_pod_builder_get_type() -> GType;
    pub fn wp_spa_pod_builder_new_array() -> *mut WpSpaPodBuilder;
    pub fn wp_spa_pod_builder_new_choice(choice_type: *const c_char) -> *mut WpSpaPodBuilder;
    pub fn wp_spa_pod_builder_new_object(type_name: *const c_char, id_name: *const c_char) -> *mut WpSpaPodBuilder;
    pub fn wp_spa_pod_builder_new_sequence(unit: c_uint) -> *mut WpSpaPodBuilder;
    pub fn wp_spa_pod_builder_new_struct() -> *mut WpSpaPodBuilder;
    pub fn wp_spa_pod_builder_add(self_: *mut WpSpaPodBuilder, ...);
    pub fn wp_spa_pod_builder_add_boolean(self_: *mut WpSpaPodBuilder, value: gboolean);
    pub fn wp_spa_pod_builder_add_bytes(self_: *mut WpSpaPodBuilder, value: gconstpointer, len: u32);
    pub fn wp_spa_pod_builder_add_control(self_: *mut WpSpaPodBuilder, offset: u32, ctl_type: *const c_char);
    pub fn wp_spa_pod_builder_add_double(self_: *mut WpSpaPodBuilder, value: c_double);
    pub fn wp_spa_pod_builder_add_fd(self_: *mut WpSpaPodBuilder, value: i64);
    pub fn wp_spa_pod_builder_add_float(self_: *mut WpSpaPodBuilder, value: c_float);
    pub fn wp_spa_pod_builder_add_fraction(self_: *mut WpSpaPodBuilder, num: u32, denom: u32);
    pub fn wp_spa_pod_builder_add_id(self_: *mut WpSpaPodBuilder, value: u32);
    pub fn wp_spa_pod_builder_add_int(self_: *mut WpSpaPodBuilder, value: i32);
    pub fn wp_spa_pod_builder_add_long(self_: *mut WpSpaPodBuilder, value: i64);
    pub fn wp_spa_pod_builder_add_none(self_: *mut WpSpaPodBuilder);
    pub fn wp_spa_pod_builder_add_pod(self_: *mut WpSpaPodBuilder, pod: *mut WpSpaPod);
    pub fn wp_spa_pod_builder_add_pointer(self_: *mut WpSpaPodBuilder, type_name: *const c_char, value: gconstpointer);
    pub fn wp_spa_pod_builder_add_property(self_: *mut WpSpaPodBuilder, key: *const c_char);
    pub fn wp_spa_pod_builder_add_property_id(self_: *mut WpSpaPodBuilder, id: u32);
    pub fn wp_spa_pod_builder_add_rectangle(self_: *mut WpSpaPodBuilder, width: u32, height: u32);
    pub fn wp_spa_pod_builder_add_string(self_: *mut WpSpaPodBuilder, value: *const c_char);
    //pub fn wp_spa_pod_builder_add_valist(self_: *mut WpSpaPodBuilder, args: /*Unimplemented*/va_list);
    pub fn wp_spa_pod_builder_end(self_: *mut WpSpaPodBuilder) -> *mut WpSpaPod;
    pub fn wp_spa_pod_builder_ref(self_: *mut WpSpaPodBuilder) -> *mut WpSpaPodBuilder;
    pub fn wp_spa_pod_builder_unref(self_: *mut WpSpaPodBuilder);

    //=========================================================================
    // WpSpaPodParser
    //=========================================================================
    pub fn wp_spa_pod_parser_get_type() -> GType;
    pub fn wp_spa_pod_parser_new_object(pod: *mut WpSpaPod, id_name: *mut *const c_char) -> *mut WpSpaPodParser;
    pub fn wp_spa_pod_parser_new_struct(pod: *mut WpSpaPod) -> *mut WpSpaPodParser;
    pub fn wp_spa_pod_parser_end(self_: *mut WpSpaPodParser);
    pub fn wp_spa_pod_parser_get(self_: *mut WpSpaPodParser, ...) -> gboolean;
    pub fn wp_spa_pod_parser_get_boolean(self_: *mut WpSpaPodParser, value: *mut gboolean) -> gboolean;
    pub fn wp_spa_pod_parser_get_bytes(self_: *mut WpSpaPodParser, value: *mut gconstpointer, len: *mut u32) -> gboolean;
    pub fn wp_spa_pod_parser_get_double(self_: *mut WpSpaPodParser, value: *mut c_double) -> gboolean;
    pub fn wp_spa_pod_parser_get_fd(self_: *mut WpSpaPodParser, value: *mut i64) -> gboolean;
    pub fn wp_spa_pod_parser_get_float(self_: *mut WpSpaPodParser, value: *mut c_float) -> gboolean;
    pub fn wp_spa_pod_parser_get_fraction(self_: *mut WpSpaPodParser, num: *mut u32, denom: *mut u32) -> gboolean;
    pub fn wp_spa_pod_parser_get_id(self_: *mut WpSpaPodParser, value: *mut u32) -> gboolean;
    pub fn wp_spa_pod_parser_get_int(self_: *mut WpSpaPodParser, value: *mut i32) -> gboolean;
    pub fn wp_spa_pod_parser_get_long(self_: *mut WpSpaPodParser, value: *mut i64) -> gboolean;
    pub fn wp_spa_pod_parser_get_pod(self_: *mut WpSpaPodParser) -> *mut WpSpaPod;
    pub fn wp_spa_pod_parser_get_pointer(self_: *mut WpSpaPodParser, value: *mut gconstpointer) -> gboolean;
    pub fn wp_spa_pod_parser_get_rectangle(self_: *mut WpSpaPodParser, width: *mut u32, height: *mut u32) -> gboolean;
    pub fn wp_spa_pod_parser_get_string(self_: *mut WpSpaPodParser, value: *mut *const c_char) -> gboolean;
    //pub fn wp_spa_pod_parser_get_valist(self_: *mut WpSpaPodParser, args: /*Unimplemented*/va_list) -> gboolean;
    pub fn wp_spa_pod_parser_ref(self_: *mut WpSpaPodParser) -> *mut WpSpaPodParser;
    pub fn wp_spa_pod_parser_unref(self_: *mut WpSpaPodParser);

    //=========================================================================
    // WpClient
    //=========================================================================
    pub fn wp_client_get_type() -> GType;
    pub fn wp_client_send_error(self_: *mut WpClient, id: u32, res: c_int, message: *const c_char);
    pub fn wp_client_update_permissions(self_: *mut WpClient, n_perm: c_uint, ...);
    pub fn wp_client_update_permissions_array(self_: *mut WpClient, n_perm: c_uint, permissions: *const pw_permission);

    //=========================================================================
    // WpComponentLoader
    //=========================================================================
    pub fn wp_component_loader_get_type() -> GType;

    //=========================================================================
    // WpCore
    //=========================================================================
    pub fn wp_core_get_type() -> GType;
    pub fn wp_core_new(context: *mut glib::GMainContext, properties: *mut WpProperties) -> *mut WpCore;
    pub fn wp_core_clone(self_: *mut WpCore) -> *mut WpCore;
    pub fn wp_core_connect(self_: *mut WpCore) -> gboolean;
    pub fn wp_core_disconnect(self_: *mut WpCore);
    pub fn wp_core_get_g_main_context(self_: *mut WpCore) -> *mut glib::GMainContext;
    #[cfg(feature = "v0_4_16")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_16")))]
    pub fn wp_core_get_own_bound_id(self_: *mut WpCore) -> u32;
    pub fn wp_core_get_properties(self_: *mut WpCore) -> *mut WpProperties;
    pub fn wp_core_get_pw_context(self_: *mut WpCore) -> *mut pw_context;
    pub fn wp_core_get_pw_core(self_: *mut WpCore) -> *mut pw_core;
    pub fn wp_core_get_remote_cookie(self_: *mut WpCore) -> u32;
    pub fn wp_core_get_remote_host_name(self_: *mut WpCore) -> *const c_char;
    pub fn wp_core_get_remote_name(self_: *mut WpCore) -> *const c_char;
    pub fn wp_core_get_remote_properties(self_: *mut WpCore) -> *mut WpProperties;
    pub fn wp_core_get_remote_user_name(self_: *mut WpCore) -> *const c_char;
    pub fn wp_core_get_remote_version(self_: *mut WpCore) -> *const c_char;
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_core_get_vm_type(self_: *mut WpCore) -> *mut c_char;
    pub fn wp_core_idle_add(self_: *mut WpCore, source: *mut *mut glib::GSource, function: glib::GSourceFunc, data: gpointer, destroy: glib::GDestroyNotify);
    pub fn wp_core_idle_add_closure(self_: *mut WpCore, source: *mut *mut glib::GSource, closure: *mut gobject::GClosure);
    pub fn wp_core_install_object_manager(self_: *mut WpCore, om: *mut WpObjectManager);
    pub fn wp_core_is_connected(self_: *mut WpCore) -> gboolean;
    pub fn wp_core_load_component(self_: *mut WpCore, component: *const c_char, type_: *const c_char, args: *mut glib::GVariant, error: *mut *mut glib::GError) -> gboolean;
    pub fn wp_core_sync(self_: *mut WpCore, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer) -> gboolean;
    #[cfg(feature = "v0_4_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_6")))]
    pub fn wp_core_sync_closure(self_: *mut WpCore, cancellable: *mut gio::GCancellable, closure: *mut gobject::GClosure) -> gboolean;
    pub fn wp_core_sync_finish(self_: *mut WpCore, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn wp_core_timeout_add(self_: *mut WpCore, source: *mut *mut glib::GSource, timeout_ms: c_uint, function: glib::GSourceFunc, data: gpointer, destroy: glib::GDestroyNotify);
    pub fn wp_core_timeout_add_closure(self_: *mut WpCore, source: *mut *mut glib::GSource, timeout_ms: c_uint, closure: *mut gobject::GClosure);
    pub fn wp_core_update_properties(self_: *mut WpCore, updates: *mut WpProperties);

    //=========================================================================
    // WpDbus
    //=========================================================================
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_dbus_get_type() -> GType;
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_dbus_get_instance(core: *mut WpCore, bus_type: gio::GBusType) -> *mut WpDbus;
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_dbus_get_bus_type(self_: *mut WpDbus) -> gio::GBusType;
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_dbus_get_connection(self_: *mut WpDbus) -> *mut gio::GDBusConnection;
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_dbus_get_state(self_: *mut WpDbus) -> WpDBusState;

    //=========================================================================
    // WpDevice
    //=========================================================================
    pub fn wp_device_get_type() -> GType;
    pub fn wp_device_new_from_factory(core: *mut WpCore, factory_name: *const c_char, properties: *mut WpProperties) -> *mut WpDevice;

    //=========================================================================
    // WpEndpoint
    //=========================================================================
    pub fn wp_endpoint_get_type() -> GType;
    pub fn wp_endpoint_get_direction(self_: *mut WpEndpoint) -> WpDirection;
    pub fn wp_endpoint_get_media_class(self_: *mut WpEndpoint) -> *const c_char;
    pub fn wp_endpoint_get_name(self_: *mut WpEndpoint) -> *const c_char;

    //=========================================================================
    // WpFactory
    //=========================================================================
    #[cfg(feature = "v0_4_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_5")))]
    pub fn wp_factory_get_type() -> GType;

    //=========================================================================
    // WpFeatureActivationTransition
    //=========================================================================
    pub fn wp_feature_activation_transition_get_type() -> GType;
    pub fn wp_feature_activation_transition_get_requested_features(self_: *mut WpFeatureActivationTransition) -> WpObjectFeatures;

    //=========================================================================
    // WpGlobalProxy
    //=========================================================================
    pub fn wp_global_proxy_get_type() -> GType;
    pub fn wp_global_proxy_bind(self_: *mut WpGlobalProxy) -> gboolean;
    pub fn wp_global_proxy_get_global_properties(self_: *mut WpGlobalProxy) -> *mut WpProperties;
    pub fn wp_global_proxy_get_permissions(self_: *mut WpGlobalProxy) -> u32;
    pub fn wp_global_proxy_request_destroy(self_: *mut WpGlobalProxy);

    //=========================================================================
    // WpImplEndpoint
    //=========================================================================
    pub fn wp_impl_endpoint_get_type() -> GType;
    pub fn wp_impl_endpoint_new(core: *mut WpCore, item: *mut WpSiEndpoint) -> *mut WpImplEndpoint;

    //=========================================================================
    // WpImplMetadata
    //=========================================================================
    pub fn wp_impl_metadata_get_type() -> GType;
    pub fn wp_impl_metadata_new(core: *mut WpCore) -> *mut WpImplMetadata;
    #[cfg(feature = "v0_4_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_3")))]
    pub fn wp_impl_metadata_new_full(core: *mut WpCore, name: *const c_char, properties: *mut WpProperties) -> *mut WpImplMetadata;

    //=========================================================================
    // WpImplModule
    //=========================================================================
    #[cfg(feature = "v0_4_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_2")))]
    pub fn wp_impl_module_get_type() -> GType;
    #[cfg(feature = "v0_4_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_2")))]
    pub fn wp_impl_module_load(core: *mut WpCore, name: *const c_char, arguments: *const c_char, properties: *mut WpProperties) -> *mut WpImplModule;
    #[cfg(feature = "v0_4_15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_15")))]
    pub fn wp_impl_module_load_file(core: *mut WpCore, name: *const c_char, filename: *const c_char, properties: *mut WpProperties) -> *mut WpImplModule;

    //=========================================================================
    // WpImplNode
    //=========================================================================
    pub fn wp_impl_node_get_type() -> GType;
    pub fn wp_impl_node_new_from_pw_factory(core: *mut WpCore, factory_name: *const c_char, properties: *mut WpProperties) -> *mut WpImplNode;
    pub fn wp_impl_node_new_wrap(core: *mut WpCore, node: *mut pw_impl_node) -> *mut WpImplNode;

    //=========================================================================
    // WpLink
    //=========================================================================
    pub fn wp_link_get_type() -> GType;
    pub fn wp_link_new_from_factory(core: *mut WpCore, factory_name: *const c_char, properties: *mut WpProperties) -> *mut WpLink;
    pub fn wp_link_get_linked_object_ids(self_: *mut WpLink, output_node: *mut u32, output_port: *mut u32, input_node: *mut u32, input_port: *mut u32);
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_link_get_state(self_: *mut WpLink, error: *mut *const c_char) -> WpLinkState;

    //=========================================================================
    // WpMetadata
    //=========================================================================
    pub fn wp_metadata_get_type() -> GType;
    pub fn wp_metadata_iterator_item_extract(item: *const gobject::GValue, subject: *mut u32, key: *mut *const c_char, type_: *mut *const c_char, value: *mut *const c_char);
    pub fn wp_metadata_clear(self_: *mut WpMetadata);
    pub fn wp_metadata_find(self_: *mut WpMetadata, subject: u32, key: *const c_char, type_: *mut *const c_char) -> *const c_char;
    pub fn wp_metadata_new_iterator(self_: *mut WpMetadata, subject: u32) -> *mut WpIterator;
    pub fn wp_metadata_set(self_: *mut WpMetadata, subject: u32, key: *const c_char, type_: *const c_char, value: *const c_char);

    //=========================================================================
    // WpNode
    //=========================================================================
    pub fn wp_node_get_type() -> GType;
    pub fn wp_node_new_from_factory(core: *mut WpCore, factory_name: *const c_char, properties: *mut WpProperties) -> *mut WpNode;
    pub fn wp_node_get_n_input_ports(self_: *mut WpNode, max: *mut c_uint) -> c_uint;
    pub fn wp_node_get_n_output_ports(self_: *mut WpNode, max: *mut c_uint) -> c_uint;
    pub fn wp_node_get_n_ports(self_: *mut WpNode) -> c_uint;
    pub fn wp_node_get_state(self_: *mut WpNode, error: *mut *const c_char) -> WpNodeState;
    pub fn wp_node_lookup_port(self_: *mut WpNode, ...) -> *mut WpPort;
    pub fn wp_node_lookup_port_full(self_: *mut WpNode, interest: *mut WpObjectInterest) -> *mut WpPort;
    pub fn wp_node_new_ports_filtered_iterator(self_: *mut WpNode, ...) -> *mut WpIterator;
    pub fn wp_node_new_ports_filtered_iterator_full(self_: *mut WpNode, interest: *mut WpObjectInterest) -> *mut WpIterator;
    pub fn wp_node_new_ports_iterator(self_: *mut WpNode) -> *mut WpIterator;
    pub fn wp_node_send_command(self_: *mut WpNode, command: *const c_char);

    //=========================================================================
    // WpObject
    //=========================================================================
    pub fn wp_object_get_type() -> GType;
    #[cfg(feature = "v0_4_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_6")))]
    pub fn wp_object_abort_activation(self_: *mut WpObject, msg: *const c_char);
    pub fn wp_object_activate(self_: *mut WpObject, features: WpObjectFeatures, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn wp_object_activate_closure(self_: *mut WpObject, features: WpObjectFeatures, cancellable: *mut gio::GCancellable, closure: *mut gobject::GClosure);
    pub fn wp_object_activate_finish(self_: *mut WpObject, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn wp_object_deactivate(self_: *mut WpObject, features: WpObjectFeatures);
    pub fn wp_object_get_active_features(self_: *mut WpObject) -> WpObjectFeatures;
    pub fn wp_object_get_core(self_: *mut WpObject) -> *mut WpCore;
    pub fn wp_object_get_supported_features(self_: *mut WpObject) -> WpObjectFeatures;
    pub fn wp_object_update_features(self_: *mut WpObject, activated: WpObjectFeatures, deactivated: WpObjectFeatures);

    //=========================================================================
    // WpObjectManager
    //=========================================================================
    pub fn wp_object_manager_get_type() -> GType;
    pub fn wp_object_manager_new() -> *mut WpObjectManager;
    pub fn wp_object_manager_add_interest(self_: *mut WpObjectManager, gtype: GType, ...);
    pub fn wp_object_manager_add_interest_full(self_: *mut WpObjectManager, interest: *mut WpObjectInterest);
    pub fn wp_object_manager_get_n_objects(self_: *mut WpObjectManager) -> c_uint;
    pub fn wp_object_manager_is_installed(self_: *mut WpObjectManager) -> gboolean;
    pub fn wp_object_manager_lookup(self_: *mut WpObjectManager, gtype: GType, ...) -> *mut gobject::GObject;
    pub fn wp_object_manager_lookup_full(self_: *mut WpObjectManager, interest: *mut WpObjectInterest) -> *mut gobject::GObject;
    pub fn wp_object_manager_new_filtered_iterator(self_: *mut WpObjectManager, gtype: GType, ...) -> *mut WpIterator;
    pub fn wp_object_manager_new_filtered_iterator_full(self_: *mut WpObjectManager, interest: *mut WpObjectInterest) -> *mut WpIterator;
    pub fn wp_object_manager_new_iterator(self_: *mut WpObjectManager) -> *mut WpIterator;
    pub fn wp_object_manager_request_object_features(self_: *mut WpObjectManager, object_type: GType, wanted_features: WpObjectFeatures);

    //=========================================================================
    // WpPlugin
    //=========================================================================
    pub fn wp_plugin_get_type() -> GType;
    pub fn wp_plugin_find(core: *mut WpCore, plugin_name: *const c_char) -> *mut WpPlugin;
    pub fn wp_plugin_get_name(self_: *mut WpPlugin) -> *const c_char;
    pub fn wp_plugin_register(plugin: *mut WpPlugin);

    //=========================================================================
    // WpPort
    //=========================================================================
    pub fn wp_port_get_type() -> GType;
    pub fn wp_port_get_direction(self_: *mut WpPort) -> WpDirection;

    //=========================================================================
    // WpProxy
    //=========================================================================
    pub fn wp_proxy_get_type() -> GType;
    pub fn wp_proxy_get_bound_id(self_: *mut WpProxy) -> u32;
    pub fn wp_proxy_get_interface_type(self_: *mut WpProxy, version: *mut u32) -> *const c_char;
    pub fn wp_proxy_get_pw_proxy(self_: *mut WpProxy) -> *mut pw_proxy;
    pub fn wp_proxy_set_pw_proxy(self_: *mut WpProxy, proxy: *mut pw_proxy);

    //=========================================================================
    // WpSessionItem
    //=========================================================================
    pub fn wp_session_item_get_type() -> GType;
    pub fn wp_session_item_handle_proxy_destroyed(proxy: *mut WpProxy, item: *mut WpSessionItem);
    pub fn wp_session_item_make(core: *mut WpCore, factory_name: *const c_char) -> *mut WpSessionItem;
    pub fn wp_session_item_configure(self_: *mut WpSessionItem, props: *mut WpProperties) -> gboolean;
    pub fn wp_session_item_get_associated_proxy(self_: *mut WpSessionItem, proxy_type: GType) -> *mut WpProxy;
    pub fn wp_session_item_get_associated_proxy_id(self_: *mut WpSessionItem, proxy_type: GType) -> u32;
    pub fn wp_session_item_get_id(self_: *mut WpSessionItem) -> c_uint;
    pub fn wp_session_item_get_properties(self_: *mut WpSessionItem) -> *mut WpProperties;
    pub fn wp_session_item_get_property(self_: *mut WpSessionItem, key: *const c_char) -> *const c_char;
    pub fn wp_session_item_is_configured(self_: *mut WpSessionItem) -> gboolean;
    pub fn wp_session_item_register(self_: *mut WpSessionItem);
    pub fn wp_session_item_remove(self_: *mut WpSessionItem);
    pub fn wp_session_item_reset(self_: *mut WpSessionItem);
    pub fn wp_session_item_set_properties(self_: *mut WpSessionItem, props: *mut WpProperties);

    //=========================================================================
    // WpSiFactory
    //=========================================================================
    pub fn wp_si_factory_get_type() -> GType;
    pub fn wp_si_factory_new_simple(factory_name: *const c_char, si_type: GType) -> *mut WpSiFactory;
    pub fn wp_si_factory_find(core: *mut WpCore, factory_name: *const c_char) -> *mut WpSiFactory;
    pub fn wp_si_factory_register(core: *mut WpCore, factory: *mut WpSiFactory);
    pub fn wp_si_factory_construct(self_: *mut WpSiFactory, core: *mut WpCore) -> *mut WpSessionItem;
    pub fn wp_si_factory_get_name(self_: *mut WpSiFactory) -> *const c_char;

    //=========================================================================
    // WpSpaDevice
    //=========================================================================
    pub fn wp_spa_device_get_type() -> GType;
    pub fn wp_spa_device_new_from_spa_factory(core: *mut WpCore, factory_name: *const c_char, properties: *mut WpProperties) -> *mut WpSpaDevice;
    pub fn wp_spa_device_new_wrap(core: *mut WpCore, spa_device_handle: gpointer, properties: *mut WpProperties) -> *mut WpSpaDevice;
    pub fn wp_spa_device_get_managed_object(self_: *mut WpSpaDevice, id: c_uint) -> *mut gobject::GObject;
    pub fn wp_spa_device_get_properties(self_: *mut WpSpaDevice) -> *mut WpProperties;
    #[cfg(feature = "v0_4_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_11")))]
    pub fn wp_spa_device_new_managed_object_iterator(self_: *mut WpSpaDevice) -> *mut WpIterator;
    pub fn wp_spa_device_store_managed_object(self_: *mut WpSpaDevice, id: c_uint, object: *mut gobject::GObject);

    //=========================================================================
    // WpSpaType
    //=========================================================================
    pub fn wp_spa_type_get_type() -> GType;
    pub fn wp_spa_type_from_name(name: *const c_char) -> WpSpaType;
    pub fn wp_spa_type_get_object_id_values_table(type_: WpSpaType) -> WpSpaIdTable;
    pub fn wp_spa_type_get_values_table(type_: WpSpaType) -> WpSpaIdTable;
    pub fn wp_spa_type_is_fundamental(type_: WpSpaType) -> gboolean;
    pub fn wp_spa_type_is_id(type_: WpSpaType) -> gboolean;
    pub fn wp_spa_type_is_object(type_: WpSpaType) -> gboolean;
    pub fn wp_spa_type_name(type_: WpSpaType) -> *const c_char;
    pub fn wp_spa_type_parent(type_: WpSpaType) -> WpSpaType;

    //=========================================================================
    // WpState
    //=========================================================================
    pub fn wp_state_get_type() -> GType;
    pub fn wp_state_new(name: *const c_char) -> *mut WpState;
    pub fn wp_state_clear(self_: *mut WpState);
    pub fn wp_state_get_location(self_: *mut WpState) -> *const c_char;
    pub fn wp_state_get_name(self_: *mut WpState) -> *const c_char;
    pub fn wp_state_load(self_: *mut WpState) -> *mut WpProperties;
    pub fn wp_state_save(self_: *mut WpState, props: *mut WpProperties, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // WpTransition
    //=========================================================================
    pub fn wp_transition_get_type() -> GType;
    pub fn wp_transition_new(type_: GType, source_object: *mut gobject::GObject, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, callback_data: gpointer) -> *mut WpTransition;
    pub fn wp_transition_new_closure(type_: GType, source_object: *mut gobject::GObject, cancellable: *mut gio::GCancellable, closure: *mut gobject::GClosure) -> *mut WpTransition;
    pub fn wp_transition_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn wp_transition_advance(self_: *mut WpTransition);
    pub fn wp_transition_get_completed(self_: *mut WpTransition) -> gboolean;
    pub fn wp_transition_get_data(self_: *mut WpTransition) -> gpointer;
    pub fn wp_transition_get_source_object(self_: *mut WpTransition) -> *mut gobject::GObject;
    pub fn wp_transition_get_source_tag(self_: *mut WpTransition) -> gpointer;
    pub fn wp_transition_had_error(self_: *mut WpTransition) -> gboolean;
    pub fn wp_transition_is_tagged(self_: *mut WpTransition, tag: gpointer) -> gboolean;
    pub fn wp_transition_return_error(self_: *mut WpTransition, error: *mut glib::GError);
    pub fn wp_transition_set_data(self_: *mut WpTransition, data: gpointer, data_destroy: glib::GDestroyNotify);
    pub fn wp_transition_set_source_tag(self_: *mut WpTransition, tag: gpointer);

    //=========================================================================
    // WpPipewireObject
    //=========================================================================
    pub fn wp_pipewire_object_get_type() -> GType;
    pub fn wp_pipewire_object_enum_params(self_: *mut WpPipewireObject, id: *const c_char, filter: *mut WpSpaPod, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn wp_pipewire_object_enum_params_finish(self_: *mut WpPipewireObject, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut WpIterator;
    pub fn wp_pipewire_object_enum_params_sync(self_: *mut WpPipewireObject, id: *const c_char, filter: *mut WpSpaPod) -> *mut WpIterator;
    pub fn wp_pipewire_object_get_native_info(self_: *mut WpPipewireObject) -> gconstpointer;
    pub fn wp_pipewire_object_get_param_info(self_: *mut WpPipewireObject) -> *mut glib::GVariant;
    pub fn wp_pipewire_object_get_properties(self_: *mut WpPipewireObject) -> *mut WpProperties;
    pub fn wp_pipewire_object_get_property(self_: *mut WpPipewireObject, key: *const c_char) -> *const c_char;
    pub fn wp_pipewire_object_new_properties_iterator(self_: *mut WpPipewireObject) -> *mut WpIterator;
    pub fn wp_pipewire_object_set_param(self_: *mut WpPipewireObject, id: *const c_char, flags: u32, param: *mut WpSpaPod) -> gboolean;

    //=========================================================================
    // WpSiAcquisition
    //=========================================================================
    pub fn wp_si_acquisition_get_type() -> GType;
    pub fn wp_si_acquisition_acquire(self_: *mut WpSiAcquisition, acquisitor: *mut WpSiLink, item: *mut WpSiLinkable, callback: gio::GAsyncReadyCallback, data: gpointer);
    pub fn wp_si_acquisition_acquire_finish(self_: *mut WpSiAcquisition, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn wp_si_acquisition_release(self_: *mut WpSiAcquisition, acquisitor: *mut WpSiLink, item: *mut WpSiLinkable);

    //=========================================================================
    // WpSiAdapter
    //=========================================================================
    pub fn wp_si_adapter_get_type() -> GType;
    pub fn wp_si_adapter_get_ports_format(self_: *mut WpSiAdapter, mode: *mut *const c_char) -> *mut WpSpaPod;
    #[cfg(feature = "v0_4_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_10")))]
    pub fn wp_si_adapter_get_ports_state(self_: *mut WpSiAdapter) -> WpSiAdapterPortsState;
    pub fn wp_si_adapter_set_ports_format(self_: *mut WpSiAdapter, format: *mut WpSpaPod, mode: *const c_char, callback: gio::GAsyncReadyCallback, data: gpointer);
    pub fn wp_si_adapter_set_ports_format_finish(self_: *mut WpSiAdapter, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // WpSiEndpoint
    //=========================================================================
    pub fn wp_si_endpoint_get_type() -> GType;
    pub fn wp_si_endpoint_get_properties(self_: *mut WpSiEndpoint) -> *mut WpProperties;
    pub fn wp_si_endpoint_get_registration_info(self_: *mut WpSiEndpoint) -> *mut glib::GVariant;

    //=========================================================================
    // WpSiLink
    //=========================================================================
    pub fn wp_si_link_get_type() -> GType;
    pub fn wp_si_link_get_in_item(self_: *mut WpSiLink) -> *mut WpSiLinkable;
    pub fn wp_si_link_get_out_item(self_: *mut WpSiLink) -> *mut WpSiLinkable;
    pub fn wp_si_link_get_properties(self_: *mut WpSiLink) -> *mut WpProperties;
    pub fn wp_si_link_get_registration_info(self_: *mut WpSiLink) -> *mut glib::GVariant;

    //=========================================================================
    // WpSiLinkable
    //=========================================================================
    pub fn wp_si_linkable_get_type() -> GType;
    pub fn wp_si_linkable_get_acquisition(self_: *mut WpSiLinkable) -> *mut WpSiAcquisition;
    pub fn wp_si_linkable_get_ports(self_: *mut WpSiLinkable, context: *const c_char) -> *mut glib::GVariant;

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn wp_domain_library_quark() -> glib::GQuark;
    #[cfg(feature = "v0_4_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_2")))]
    pub fn wp_find_file(dirs: WpLookupDirs, filename: *const c_char, subdir: *const c_char) -> *mut c_char;
    pub fn wp_get_config_dir() -> *const c_char;
    pub fn wp_get_data_dir() -> *const c_char;
    #[cfg(feature = "v0_4_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_12")))]
    pub fn wp_get_library_api_version() -> *const c_char;
    #[cfg(feature = "v0_4_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_12")))]
    pub fn wp_get_library_version() -> *const c_char;
    pub fn wp_get_module_dir() -> *const c_char;
    pub fn wp_init(flags: WpInitFlags);
    pub fn wp_log_level_is_enabled(log_level: glib::GLogLevelFlags) -> gboolean;
    pub fn wp_log_set_level(level_str: *const c_char);
    pub fn wp_log_structured_standard(log_domain: *const c_char, log_level: glib::GLogLevelFlags, file: *const c_char, line: *const c_char, func: *const c_char, object_type: GType, object: gconstpointer, message_format: *const c_char, ...);
    pub fn wp_log_writer_default(log_level: glib::GLogLevelFlags, fields: *const glib::GLogField, n_fields: size_t, user_data: gpointer) -> glib::GLogWriterOutput;
    #[cfg(feature = "v0_4_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_4_2")))]
    pub fn wp_new_files_iterator(dirs: WpLookupDirs, subdir: *const c_char, suffix: *const c_char) -> *mut WpIterator;
    pub fn wp_spa_dynamic_id_table_register(name: *const c_char, values: *const spa_type_info) -> WpSpaIdTable;
    pub fn wp_spa_dynamic_type_deinit();
    pub fn wp_spa_dynamic_type_init();
    pub fn wp_spa_dynamic_type_register(name: *const c_char, parent: WpSpaType, values: *const spa_type_info) -> WpSpaType;
    pub fn wp_spa_id_table_find_value(table: WpSpaIdTable, value: c_uint) -> WpSpaIdValue;
    pub fn wp_spa_id_table_find_value_from_name(table: WpSpaIdTable, name: *const c_char) -> WpSpaIdValue;
    pub fn wp_spa_id_table_find_value_from_short_name(table: WpSpaIdTable, short_name: *const c_char) -> WpSpaIdValue;
    pub fn wp_spa_id_table_from_name(name: *const c_char) -> WpSpaIdTable;
    pub fn wp_spa_id_table_get_type() -> GType;
    pub fn wp_spa_id_table_new_iterator(table: WpSpaIdTable) -> *mut WpIterator;
    pub fn wp_spa_id_value_array_get_item_type(id: WpSpaIdValue, table: *mut WpSpaIdTable) -> WpSpaType;
    pub fn wp_spa_id_value_from_name(name: *const c_char) -> WpSpaIdValue;
    pub fn wp_spa_id_value_from_number(table_name: *const c_char, id: c_uint) -> WpSpaIdValue;
    pub fn wp_spa_id_value_from_short_name(table_name: *const c_char, short_name: *const c_char) -> WpSpaIdValue;
    pub fn wp_spa_id_value_get_type() -> GType;
    pub fn wp_spa_id_value_get_value_type(id: WpSpaIdValue, table: *mut WpSpaIdTable) -> WpSpaType;
    pub fn wp_spa_id_value_name(id: WpSpaIdValue) -> *const c_char;
    pub fn wp_spa_id_value_number(id: WpSpaIdValue) -> c_uint;
    pub fn wp_spa_id_value_short_name(id: WpSpaIdValue) -> *const c_char;
    pub fn wp_spa_log_get_instance() -> *mut spa_log;

}
